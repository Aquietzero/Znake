// Generated by CoffeeScript 1.3.3
(function() {
  var GameLayer;

  GameLayer = (function() {

    function GameLayer(container, width, height) {
      this.width = width;
      this.height = height;
      this.canvas = document.createElement('canvas');
      this.canvas.id = 'GameCanvas';
      this.canvas.width = width;
      this.canvas.height = height;
      document.getElementById(container).appendChild(this.canvas);
      this.initCanvas();
      this.initMap();
      this.initSnake();
      this.status = 'RUNNING';
      this.initEvents();
    }

    GameLayer.prototype.initCanvas = function() {
      this.context = this.canvas.getContext('2d');
      this.context.fillStyle = '#000000';
      return this.context.fillRect(0, 0, this.width, this.height);
    };

    GameLayer.prototype.initMap = function() {
      this.map = new Map(10, this.context, this.canvas);
      this.map.generateFood();
      return this.map.render();
    };

    GameLayer.prototype.initSnake = function() {
      this.snake = new Snake(this.map, this.context);
      return this.snake.render();
    };

    GameLayer.prototype.initEvents = function() {
      var _this = this;
      return document.onkeydown = function(event) {
        switch (event.keyCode) {
          case 38:
            return _this.snake.turn('UP');
          case 39:
            return _this.snake.turn('RIGHT');
          case 40:
            return _this.snake.turn('DOWN');
          case 37:
            return _this.snake.turn('LEFT');
          case 32:
            return _this.pause();
        }
      };
    };

    GameLayer.prototype.run = function() {
      var update,
        _this = this;
      update = function() {
        _this.map.render();
        if (!_this.snake.move()) {
          alert('Game Over');
          return _this.stop();
        }
      };
      return this.run_id = setInterval(update, 30);
    };

    GameLayer.prototype.stop = function() {
      return clearInterval(this.run_id);
    };

    GameLayer.prototype.pause = function() {
      if (this.status === 'RUNNING') {
        this.status = 'STOP';
        return this.stop();
      } else if (this.status === 'STOP') {
        this.status = 'RUNNING';
        return this.run();
      }
    };

    return GameLayer;

  })();

  this.GameLayer = GameLayer;

}).call(this);
