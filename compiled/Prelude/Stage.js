// Generated by CoffeeScript 1.3.3
(function() {
  var Stage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stage = (function(_super) {

    __extends(Stage, _super);

    function Stage(grid_size, container, width, height) {
      var x, y, _i, _j, _ref, _ref1;
      this.grid_size = grid_size;
      Stage.__super__.constructor.call(this, container, width, height);
      this.width = this.canvas.width / this.grid_size;
      this.height = this.canvas.height / this.grid_size;
      this.grains = {};
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.grains["" + x + "-" + y] = new Grain(x, y, this.grid_size, Type.WATER, 0, this.context);
        }
      }
      this.render();
      this.renderGrid();
    }

    Stage.prototype.$ = function(x, y) {
      return this.grains["" + x + "-" + y];
    };

    Stage.prototype.update = function() {};

    Stage.prototype.render = function() {
      var grain, index, _ref, _results;
      _ref = this.grains;
      _results = [];
      for (index in _ref) {
        grain = _ref[index];
        _results.push(grain.render());
      }
      return _results;
    };

    Stage.prototype.renderGrid = function() {
      var i, _i, _j, _ref, _ref1, _ref2, _ref3;
      this.context.strokeStyle = '#000000';
      this.context.beginPath();
      for (i = _i = 0.5, _ref = this.canvas.width, _ref1 = this.grid_size; 0.5 <= _ref ? _i <= _ref : _i >= _ref; i = _i += _ref1) {
        this.context.moveTo(i, 0);
        this.context.lineTo(i, this.canvas.height);
      }
      for (i = _j = 0.5, _ref2 = this.canvas.height, _ref3 = this.grid_size; 0.5 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = _j += _ref3) {
        this.context.moveTo(0, i);
        this.context.lineTo(this.canvas.width, i);
      }
      this.context.closePath();
      return this.context.stroke();
    };

    return Stage;

  })(Layer);

  this.Stage = Stage;

}).call(this);
