// Generated by CoffeeScript 1.3.3
(function() {
  var ParticleSystem;

  ParticleSystem = (function() {

    function ParticleSystem(context, config) {
      var i, rand_x, rand_y;
      this.context = context;
      rand_x = Utils.random(100, 700);
      rand_y = Utils.random(100, 700);
      this.pos = new Vector(40, 30);
      this.size = 10;
      this.life = 5;
      this.num = 50;
      this.configure(config);
      this.particles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.num; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(new Particle(this.pos, this.size, this.life, this.context));
        }
        return _results;
      }).call(this);
    }

    ParticleSystem.prototype.evolve = function() {
      var i, particle, _i, _len, _ref, _results;
      _ref = this.particles;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        particle = _ref[i];
        particle.evolve();
        if (particle.isDead()) {
          particle.clear();
          this.kill(i);
          _results.push(this.particles.push(new Particle(this.pos, this.size, this.life, this.context)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ParticleSystem.prototype.kill = function(index) {
      this.particles[index] = this.particles[this.particles.length - 1];
      return this.particles.pop();
    };

    ParticleSystem.prototype.configure = function(config) {
      var key, val, _results;
      _results = [];
      for (key in config) {
        val = config[key];
        if (this.hasOwnProperty(key)) {
          _results.push(this[key] = val);
        }
      }
      return _results;
    };

    return ParticleSystem;

  })();

  this.ParticleSystem = ParticleSystem;

}).call(this);
