// Generated by CoffeeScript 1.3.3
(function() {
  var Grain,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Grain = (function() {

    function Grain(x, y, size, type, context) {
      this.x = x;
      this.y = y;
      this.size = size;
      this.type = type;
      this.context = context;
      this.value = 0;
    }

    Grain.prototype.setType = function(type) {
      return this.type = type;
    };

    Grain.prototype.isType = function() {
      var _ref;
      return _ref = this.type, __indexOf.call(arguments, _ref) >= 0;
    };

    Grain.prototype.getColor = function() {
      var blue, green;
      if (this.value > 2) {
        if (this.value > 255) {
          this.value = 255;
        }
        if (this.value < 0) {
          this.value = 0;
        }
        blue = Math.floor(this.value).toString(16);
        if (blue.length === 1) {
          blue += blue;
        }
        green = Math.floor(this.value / 4).toString(16);
        if (green.length === 1) {
          green += green;
        }
        return "#" + green + "00" + blue;
      } else {
        return '#000011';
      }
    };

    Grain.prototype.reset = function() {
      return this.context.clearRect(this.x * this.size + 1, this.y * this.size + 1, this.size - 1, this.size - 1);
    };

    Grain.prototype.render = function(color) {
      switch (this.type) {
        case Type.WATER:
          color = this.getColor();
          break;
        case Type.FOOD:
          color = '#ffff00';
      }
      this.context.fillStyle = color;
      return this.context.fillRect(this.x * this.size + 1, this.y * this.size + 1, this.size - 1, this.size - 1);
    };

    return Grain;

  })();

  this.Grain = Grain;

}).call(this);
