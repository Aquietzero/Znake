// Generated by CoffeeScript 1.3.3
(function() {
  var Snake;

  Snake = (function() {

    function Snake(map, context) {
      var grain, i, _i;
      this.map = map;
      this.context = context;
      this.dir = {
        x: 0,
        y: -1
      };
      this.body = [];
      for (i = _i = 0; _i < 7; i = ++_i) {
        grain = this.map.$(20, 20 + i);
        grain.type = 1;
        this.body.push(grain);
      }
    }

    Snake.prototype.head = function() {
      return this.body[0];
    };

    Snake.prototype.turn = function(dir) {
      var new_dir;
      switch (dir) {
        case 'UP':
          new_dir = {
            x: 0,
            y: -1
          };
          break;
        case 'LEFT':
          new_dir = {
            x: -1,
            y: 0
          };
          break;
        case 'RIGHT':
          new_dir = {
            x: 1,
            y: 0
          };
          break;
        case 'DOWN':
          new_dir = {
            x: 0,
            y: 1
          };
      }
      if (!this.isValidToTurn(new_dir)) {
        return this.dir = new_dir;
      }
    };

    Snake.prototype.move = function() {
      var head, new_head, tail;
      head = this.body[0];
      if (!this.isValidToMove(head)) {
        return false;
      } else {
        new_head = this.map.$(head.x + this.dir.x, head.y + this.dir.y);
        new_head.type = 1;
        this.body.unshift(new_head);
        tail = this.body.pop();
        tail.type = 0;
        tail.clear();
        this.render();
        return true;
      }
    };

    Snake.prototype.isValidToTurn = function(new_dir) {
      return this.dir.x + new_dir.x === 0 || this.dir.y + new_dir.y === 0;
    };

    Snake.prototype.isValidToMove = function(head) {
      var next_pos, _ref;
      next_pos = {
        x: head.x + this.dir.x,
        y: head.y + this.dir.y
      };
      if (((_ref = this.map.$(next_pos.x, next_pos.y)) != null ? _ref.type : void 0) !== 0) {
        return false;
      }
      return true;
    };

    Snake.prototype.render = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.body.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.body[i].render("" + (i + 4) + (i + 4) + "0000"));
      }
      return _results;
    };

    return Snake;

  })();

  this.Snake = Snake;

}).call(this);
