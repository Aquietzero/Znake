// Generated by CoffeeScript 1.3.3
(function() {
  var Snake;

  Snake = (function() {

    function Snake(grid_size, map, context) {
      var i;
      this.grid_size = grid_size;
      this.map = map;
      this.context = context;
      this.dir = {
        x: 0,
        y: -1
      };
      this.body = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 7; i = ++_i) {
          _results.push(new Grain(20, 20 + i, this.grid_size, this.context));
        }
        return _results;
      }).call(this);
      console.log(this.body);
    }

    Snake.prototype.turn = function(dir) {
      var new_dir;
      switch (dir) {
        case 'UP':
          new_dir = {
            x: 0,
            y: -1
          };
          break;
        case 'LEFT':
          new_dir = {
            x: -1,
            y: 0
          };
          break;
        case 'RIGHT':
          new_dir = {
            x: 1,
            y: 0
          };
          break;
        case 'DOWN':
          new_dir = {
            x: 0,
            y: 1
          };
      }
      if (!this.isOpposite(this.dir, new_dir)) {
        return this.dir = new_dir;
      }
    };

    Snake.prototype.move = function() {
      var head, tail;
      head = this.body[0];
      this.body.unshift(new Grain(head.x + this.dir.x, head.y + this.dir.y, this.grid_size, this.context));
      tail = this.body.pop();
      tail.clear();
      return this.render();
    };

    Snake.prototype.isOpposite = function(dir, new_dir) {
      console.log(dir.y, new_dir.y);
      return dir.x + new_dir.x === 0 || dir.y + new_dir.y === 0;
    };

    Snake.prototype.render = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.body.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.body[i].render("" + (i + 3) + (i + 3) + "0000"));
      }
      return _results;
    };

    return Snake;

  })();

  this.Snake = Snake;

}).call(this);
