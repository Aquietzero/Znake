// Generated by CoffeeScript 1.3.3
(function() {
  var Map;

  Map = (function() {

    function Map(grid_size, context, canvas) {
      var x, y, _i, _j, _ref, _ref1;
      this.grid_size = grid_size;
      this.context = context;
      this.canvas = canvas;
      this.width = this.canvas.width / this.grid_size;
      this.height = this.canvas.height / this.grid_size;
      this.grains = {};
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.grains["" + x + "-" + y] = new Grain(x, y, this.grid_size, Type.GROUND, this.context);
        }
      }
    }

    Map.prototype.$ = function(x, y) {
      return this.grains["" + x + "-" + y];
    };

    Map.prototype.isContain = function(x, y) {
      return (0 <= x || x < this.width) && (0 <= y || y < this.height);
    };

    Map.prototype.generateFood = function() {
      var food, grain, ground, index;
      ground = (function() {
        var _ref, _results;
        _ref = this.grains;
        _results = [];
        for (index in _ref) {
          grain = _ref[index];
          if (grain.isType(Type.GROUND)) {
            _results.push(grain);
          }
        }
        return _results;
      }).call(this);
      food = ground[Utils.random(0, ground.length)];
      food.setType(Type.FOOD);
      return food.render('#ffff00');
    };

    Map.prototype.render = function() {
      this.renderGrid();
      return this.renderGrains();
    };

    Map.prototype.renderGrid = function() {
      var i, _i, _j, _ref, _ref1, _ref2, _ref3;
      this.context.strokeStyle = '#111111';
      this.context.beginPath();
      for (i = _i = 0, _ref = this.canvas.width, _ref1 = this.grid_size; 0 <= _ref ? _i <= _ref : _i >= _ref; i = _i += _ref1) {
        this.context.moveTo(i, 0);
        this.context.lineTo(i, this.canvas.height);
      }
      for (i = _j = 0, _ref2 = this.canvas.height, _ref3 = this.grid_size; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = _j += _ref3) {
        this.context.moveTo(0, i);
        this.context.lineTo(this.canvas.width, i);
      }
      this.context.closePath();
      return this.context.stroke();
    };

    Map.prototype.renderGrains = function() {
      var grain, index, _ref, _results;
      _ref = this.grains;
      _results = [];
      for (index in _ref) {
        grain = _ref[index];
        _results.push(grain.render('#000000'));
      }
      return _results;
    };

    return Map;

  })();

  this.Map = Map;

}).call(this);
