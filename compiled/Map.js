// Generated by CoffeeScript 1.3.3
(function() {
  var Map;

  Map = (function() {

    function Map(grid_size, context, canvas) {
      var i, j, _i, _ref;
      this.grid_size = grid_size;
      this.context = context;
      this.canvas = canvas;
      this.width = this.canvas.width / this.grid_size;
      this.height = this.canvas.height / this.grid_size;
      this.map = [];
      for (i = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.map.push((function() {
          var _j, _ref1, _results;
          _results = [];
          for (j = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            _results.push(0);
          }
          return _results;
        }).call(this));
      }
    }

    Map.prototype.render = function() {
      var i, _i, _j, _ref, _ref1, _ref2, _ref3;
      this.context.strokeStyle = '#111111';
      this.context.beginPath();
      for (i = _i = 0, _ref = this.canvas.width, _ref1 = this.grid_size; 0 <= _ref ? _i <= _ref : _i >= _ref; i = _i += _ref1) {
        this.context.moveTo(i, 0);
        this.context.lineTo(i, this.canvas.height);
      }
      for (i = _j = 0, _ref2 = this.canvas.height, _ref3 = this.grid_size; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = _j += _ref3) {
        this.context.moveTo(0, i);
        this.context.lineTo(this.canvas.width, i);
      }
      this.context.closePath();
      return this.context.stroke();
    };

    return Map;

  })();

  this.Map = Map;

}).call(this);
