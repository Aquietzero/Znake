// Generated by CoffeeScript 1.3.3
(function() {
  var Editor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Editor = (function(_super) {

    __extends(Editor, _super);

    function Editor(grid_size, container, width, height) {
      var x, y, _i, _j, _ref, _ref1;
      this.grid_size = grid_size;
      Editor.__super__.constructor.call(this, container, width, height);
      this.grains = {};
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.grains["" + x + "-" + y] = 0;
        }
      }
      this.renderGrid();
      this.renderGrains();
    }

    Editor.prototype.renderGrid = function() {
      var i, _i, _j, _ref, _ref1, _ref2, _ref3;
      this.context.strokeStyle = '#000';
      this.context.beginPath();
      for (i = _i = 0.5, _ref = this.canvas.width, _ref1 = this.grid_size; 0.5 <= _ref ? _i <= _ref : _i >= _ref; i = _i += _ref1) {
        this.context.moveTo(i, 0);
        this.context.lineTo(i, this.canvas.height);
      }
      for (i = _j = 0.5, _ref2 = this.canvas.height, _ref3 = this.grid_size; 0.5 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = _j += _ref3) {
        this.context.moveTo(0, i);
        this.context.lineTo(this.canvas.width, i);
      }
      this.context.closePath();
      return this.context.stroke();
    };

    Editor.prototype.setGrains = function(x, y, r, val) {
      var i, j, offset, _i, _ref, _ref1, _results;
      x = Math.floor(x / this.grid_size);
      y = Math.floor(y / this.grid_size);
      offset = Math.floor(r / this.grid_size);
      _results = [];
      for (i = _i = _ref = x - offset, _ref1 = x + offset; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref2, _ref3, _results1;
          _results1 = [];
          for (j = _j = _ref2 = y - offset, _ref3 = y + offset; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            if ((i - x) * (i - x) + (j - y) * (j - y) <= offset * offset) {
              this.grains["" + i + "-" + j] = val;
              this.context.fillStyle = this.getColor(i, j);
              _results1.push(this.context.fillRect(i * this.grid_size + 1, j * this.grid_size + 1, this.grid_size - 1, this.grid_size - 1));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Editor.prototype.getColor = function(x, y) {
      var brown, value;
      value = this.grains["" + x + "-" + y];
      if (value === 0) {
        return '#001';
      } else {
        brown = Math.floor(value / 10 * 255).toString(16);
        if (brown.length === 1) {
          brown += brown;
        }
        return "#" + brown + brown + "66";
      }
    };

    Editor.prototype.renderGrains = function() {
      var x, y, _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            this.context.fillStyle = this.getColor(x, y);
            _results1.push(this.context.fillRect(x * this.grid_size + 1, y * this.grid_size + 1, this.grid_size - 1, this.grid_size - 1));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Editor.prototype.log = function() {
      var line, map, x, y, _i, _ref;
      map = [];
      for (y = _i = 0, _ref = this.height / this.grid_size; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        line = ((function() {
          var _j, _ref1, _results;
          _results = [];
          for (x = _j = 0, _ref1 = this.width / this.grid_size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results.push(this.grains["" + x + "-" + y]);
          }
          return _results;
        }).call(this)).join('');
        map.push(line);
      }
      map = map.join('\n');
      return console.log(map);
    };

    Editor.prototype.update = function() {};

    return Editor;

  })(Layer);

  this.Editor = Editor;

}).call(this);
